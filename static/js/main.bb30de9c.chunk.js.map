{"version":3,"sources":["assets/monster.png","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/header/Header.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","Header","title","App","state","searchfield","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,qC,+PCG9BC,G,MAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,0BAAoEJ,UAAU,aACpG,4BAAKD,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCDbC,G,MAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GAER,yBAAKC,UAAU,aAEbD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACxB,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,UCT/BU,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,yBAAKf,UAAU,oBACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,kBAAhB,UAGA,2BACIA,UAAU,kBACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,Q,gBCRbG,G,MAAS,SAACnB,GAAD,OAClB,yBAAKC,UAAU,mBACX,wBAAIA,UAAU,eAAeD,EAAMoB,OACnC,yBAAKnB,UAAU,YAAYE,IAAKC,SC2CzBiB,G,wDAzCb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXX,SAAU,GACVY,YAAa,IALJ,E,gEASO,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAClB,SAASiB,S,+BAIjC,IAAD,SACyBE,KAAKR,MAA7BX,EADD,EACCA,SAASY,EADV,EACUA,YACXQ,EAAmBpB,EAASqB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQE,KAAK2B,cAAcC,SAASX,EAAYU,kBAGlD,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CAAQmB,MAAM,aACd,kBAAC,EAAD,CACEL,YAAY,kBACZC,aAAc,SAAAmB,GAAM,EAAKN,SAAS,CAChCN,YAAYY,EAAEC,OAAOC,QACrB5B,QAAQC,IAAI,EAAKY,WAIlBS,EAAiBO,UAAY3B,EAAS2B,QAAW,wBAAIrC,UAAU,kBAAd,qBAEpD,kBAAC,EAAD,CAAUU,SAAWoB,S,GApCXQ,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.bb30de9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/monster.e44e6757.png\";","import React from 'react';\r\nimport './card.style.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} className=\"card-img\"></img>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.style.css';\r\n\r\n\r\nexport const CardList = (props) =>{ \r\n    console.log(props);\r\n    return(\r\n        <div className='card-list'>\r\n           {\r\n          props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster}/>\r\n          ))}\r\n        </div>\r\n    )}","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder ,handleChange}) => (\r\n    <div className='search-container'>\r\n        <div className='searchbox-container'>\r\n            <span className='material-icons'>\r\n                search\r\n            </span> \r\n            <input \r\n                className='searchbox-input'\r\n                type='search'\r\n                placeholder={placeholder} \r\n                onChange={handleChange}\r\n            /> \r\n        </div>  \r\n    </div>\r\n);","import React from 'react';\r\nimport monster from '../../assets/monster.png';\r\n\r\nimport './Header.styles.css';\r\n\r\nexport const Header = (props) => (\r\n    <div className='headerContainer'>\r\n        <h1 className='headerTitle'>{props.title}</h1>\r\n        <img className='headerImg' src={monster}/>\r\n    </div>\r\n)","import React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport {Header} from './components/header/Header.component';\n\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchfield: '',\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters:users}));\n  }\n\n\n  render() {\n    const { monsters,searchfield} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchfield.toLowerCase())\n    );\n\n    return(\n      <div className=\"App\">\n        <Header title='Monsters'/>\n        <SearchBox \n          placeholder=\"search monsters\"\n          handleChange={e =>{ this.setState({\n            searchfield:e.target.value})\n            console.log(this.state)\n          }}/>\n        {\n          \n          !filteredMonsters.length && !!monsters.length  && <h2 className='headerSubtitle'>Monster not found</h2>\n        }\n        <CardList monsters= {filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}